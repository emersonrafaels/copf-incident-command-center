import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import "https://deno.land/x/xhr@0.1.0/mod.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { messages, occurrencesContext } = await req.json();
    const LOVABLE_API_KEY = Deno.env.get("LOVABLE_API_KEY");
    
    if (!LOVABLE_API_KEY) {
      throw new Error("LOVABLE_API_KEY n√£o est√° configurado");
    }

    const systemPrompt = `Voc√™ √© um assistente especializado em an√°lise de ocorr√™ncias t√©cnicas de equipamentos banc√°rios do sistema COPF (Central Operacional de Pontos de Funcionamento).

=== GLOSS√ÅRIO DO DOM√çNIO ===

STATUS DE OCORR√äNCIA:
- a_iniciar: Ocorr√™ncia registrada mas ainda n√£o iniciada pelo fornecedor
- em_andamento: Fornecedor est√° trabalhando na resolu√ß√£o
- encerrado: Problema resolvido e fechado
- com_impedimentos: Bloqueada por algum motivo externo (ex: falta de pe√ßa, acesso negado)
- cancelado: Ocorr√™ncia cancelada/invalidada

STATUS DE EQUIPAMENTO:
- operante: Equipamento funcionando (mesmo com problema)
- inoperante: Equipamento parado/n√£o funcional - CR√çTICO pois afeta opera√ß√£o da ag√™ncia

SEGMENTOS:
- AA: Equipamentos de autoatendimento (ATMs, caixas eletr√¥nicos, terminais de saque/dep√≥sito)
- AB: Equipamentos de infraestrutura (computadores, impressoras, servidores, rede)

SEVERIDADE:
- critical: Equipamento inoperante em ag√™ncia VIP ou problema de seguran√ßa
- high: Equipamento inoperante ou problema que afeta m√∫ltiplos usu√°rios
- medium: Problema que afeta funcionalidade mas equipamento operante
- low: Problema cosm√©tico ou de performance

SLA (Service Level Agreement):
- Critical/High: 24 horas para resolu√ß√£o
- Medium/Low: 72 horas para resolu√ß√£o
- SLA vencido: Passou do prazo sem ser resolvido
- SLA cr√≠tico: Vence nas pr√≥ximas 24 horas ou menos

TIPOS DE EQUIPAMENTO:
- ATM Saque/Dep√≥sito: Caixas eletr√¥nicos para transa√ß√µes
- Cassete: M√≥dulo que armazena dinheiro no ATM
- PIN PAD: Terminal para digita√ß√£o de senha
- TCR: Terminal de Consulta e Recarga
- Classificadora: M√°quina que conta e valida notas
- Leitor biom√©trico: Scanner de impress√£o digital
- Scanner de Cheque: Leitor e processador de cheques
- Notebook/Desktop: Computadores para uso interno
- Impressora: Dispositivos de impress√£o diversos
- Monitor: Telas LCD/LED
- Servidor: Equipamentos de infraestrutura de TI

OUTROS TERMOS:
- VIP: Ag√™ncias de alto fluxo/import√¢ncia estrat√©gica
- Reincid√™ncia: Mesmo problema no mesmo equipamento em per√≠odo curto (at√© 4 dias)
- SUPT: Superintend√™ncia Regional
- DINEG: Diretoria de Neg√≥cios
- Transportadora: Empresa que transporta valores/pe√ßas (Brinks, Prosegur, etc)
- Impedimento: Bloqueio externo que impede resolu√ß√£o (ex: "Falta de pe√ßa", "Ag√™ncia fechada", "Acesso negado")
- Aging: Tempo decorrido desde a abertura da ocorr√™ncia (em horas)
- MTTR: Mean Time To Repair - tempo m√©dio de reparo

=== SUAS RESPONSABILIDADES ===
1. Responder perguntas sobre as ocorr√™ncias listadas com base no contexto fornecido
2. Explicar termos t√©cnicos quando necess√°rio (use o gloss√°rio acima)
3. Identificar padr√µes e problemas cr√≠ticos
4. Sugerir a√ß√µes baseadas nos dados (ex: "3 equipamentos inoperantes precisam aten√ß√£o urgente")
5. Calcular e explicar m√©tricas (aging, SLA, MTTR)
6. **SEMPRE mencionar quando equipamentos est√£o INOPERANTES (alta prioridade)**
7. Destacar problemas cr√≠ticos de SLA (vencido ou vencendo hoje)
8. Identificar fornecedores com mais problemas

=== ESTILO DE RESPOSTA ===
- Seja conciso e direto
- Use emojis relevantes (‚ö†Ô∏è para cr√≠tico, ‚úÖ para ok, üîß para em andamento, üö® para urgente)
- Destaque n√∫meros importantes em **negrito**
- Sempre contextualize termos t√©cnicos para facilitar compreens√£o
- Sugira a√ß√µes quando apropriado
- Priorize informa√ß√µes sobre equipamentos inoperantes e SLAs vencidos

=== CONTEXTO ATUAL ===
Total de ocorr√™ncias: ${occurrencesContext?.total || 0}

Dados detalhados:
${JSON.stringify(occurrencesContext, null, 2)}

Responda de forma clara, objetiva e em portugu√™s brasileiro.`;

    const response = await fetch("https://ai.gateway.lovable.dev/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${LOVABLE_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "google/gemini-2.5-flash",
        messages: [
          { role: "system", content: systemPrompt },
          ...messages,
        ],
        stream: true,
      }),
    });

    if (!response.ok) {
      if (response.status === 429) {
        return new Response(JSON.stringify({ error: "Limite de requisi√ß√µes excedido. Tente novamente em alguns instantes." }), {
          status: 429,
          headers: { ...corsHeaders, "Content-Type": "application/json" },
        });
      }
      if (response.status === 402) {
        return new Response(JSON.stringify({ error: "Cr√©ditos insuficientes. Adicione cr√©ditos ao seu workspace Lovable." }), {
          status: 402,
          headers: { ...corsHeaders, "Content-Type": "application/json" },
        });
      }
      const errorText = await response.text();
      console.error("Erro na AI Gateway:", response.status, errorText);
      return new Response(JSON.stringify({ error: "Erro ao processar requisi√ß√£o" }), {
        status: 500,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      });
    }

    return new Response(response.body, {
      headers: { ...corsHeaders, "Content-Type": "text/event-stream" },
    });
  } catch (error) {
    console.error("Erro no assistente:", error);
    return new Response(JSON.stringify({ error: error instanceof Error ? error.message : "Erro desconhecido" }), {
      status: 500,
      headers: { ...corsHeaders, "Content-Type": "application/json" },
    });
  }
});
